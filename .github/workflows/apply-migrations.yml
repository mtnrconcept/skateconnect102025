name: Apply Supabase Migrations

on:
  workflow_dispatch:
  push:
    paths:
      - "supabase/migrations/**"

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Installer le CLI (demande la dernière version stable)
      - name: Setup Supabase CLI (latest)
        id: setup_cli
        continue-on-error: true
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # 1bis) Fallback si le step ci-dessus échoue (ex: 404)
      - name: Fallback install via npm
        if: steps.setup_cli.outcome == 'failure'
        run: |
          set -euo pipefail
          npm i -g supabase
          supabase -v

      - name: Verify CLI
        run: supabase -v

      # 2) Appliquer les migrations via DB URL (zéro local)
      - name: Push migrations via DB URL
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_DB_URL:-}" ]; then
            echo "❌ Secret SUPABASE_DB_URL manquant."; exit 1;
          fi
          supabase migration up --db-url "${SUPABASE_DB_URL}"

      # 3) NOTIFY PostgREST pour recharger le schéma
      - name: Install psql client & jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq

      - name: NOTIFY pgrst reload
        shell: bash
        run: |
          set -euo pipefail
          psql "${SUPABASE_DB_URL}" -v ON_ERROR_STOP=1 -c "NOTIFY pgrst, 'reload schema';"

      # 4) Sanity check: colonne comment
      - name: Sanity check - spot_ratings.comment
        shell: bash
        run: |
          set -euo pipefail
          psql "${SUPABASE_DB_URL}" -v ON_ERROR_STOP=1 -c "
            select column_name from information_schema.columns
            where table_schema='public' and table_name='spot_ratings' and column_name='comment';
          "

      # 5) (Optionnel) Smoke test REST
      - name: Smoke test REST
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_URL:-}" ] && [ -n "${SUPABASE_ANON_KEY:-}" ]; then
            curl -sS "${SUPABASE_URL}/rest/v1/spot_ratings?select=id,comment&limit=1" \
              -H "apikey: ${SUPABASE_ANON_KEY}" \
              -H "Authorization: Bearer ${SUPABASE_ANON_KEY}" \
              -H "Accept-Profile: public" | jq .
          else
            echo "ℹ️ Pas de SUPABASE_URL/ANON_KEY → on saute le smoke test REST."
          fi
