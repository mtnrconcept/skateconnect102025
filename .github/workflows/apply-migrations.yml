name: Apply Supabase Migrations (IPv4 pooler via project host)

on:
  workflow_dispatch: {}
  push:
    branches: ["**"]
    paths: ["supabase/migrations/**"]

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      # === IPv4 Session Pooler via project host ===
      SUPABASE_DB_HOST: db.vlhxrovtrdhcmvvqlryd.supabase.co
      SUPABASE_DB_PORT: "6543"           # pooler IPv4 sur host projet
      SUPABASE_DB_NAME: postgres
      SUPABASE_DB_USER: postgres         # <- sans suffixe de ref

      # === Secrets (Settings → Secrets and variables → Actions) ===
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}           # optionnel
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }} # optionnel

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install psql & jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq

      - name: Build DB_URL (encode password)
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${SUPABASE_DB_PASSWORD:-}" ] || { echo "❌ SUPABASE_DB_PASSWORD manquant"; exit 1; }
          PASS_ENC=$(printf '%s' "$SUPABASE_DB_PASSWORD" | jq -sRr @uri)
          DB_URL="postgresql://${SUPABASE_DB_USER}:${PASS_ENC}@${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?sslmode=require"
          echo "DB_URL=$DB_URL" >> "$GITHUB_ENV"
          echo "✅ URL construite pour ${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT} en user=${SUPABASE_DB_USER}"

      - name: Preflight DB connectivity (psql)
        shell: bash
        run: |
          set -euo pipefail
          echo "🔎 psql \\conninfo"
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            "host=${SUPABASE_DB_HOST} port=${SUPABASE_DB_PORT} dbname=${SUPABASE_DB_NAME} user=${SUPABASE_DB_USER} sslmode=require" \
            -v ON_ERROR_STOP=1 -c "\conninfo"

      - name: Supabase CLI version
        run: supabase -v

      - name: Apply migrations
        shell: bash
        run: |
          set -euo pipefail
          echo "🚀 Applying migrations..."
          supabase migration up --db-url "${DB_URL}"

      - name: Reload PostgREST schema
        shell: bash
        run: |
          set -euo pipefail
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            "host=${SUPABASE_DB_HOST} port=${SUPABASE_DB_PORT} dbname=${SUPABASE_DB_NAME} user=${SUPABASE_DB_USER} sslmode=require" \
            -v ON_ERROR_STOP=1 -c "NOTIFY pgrst, 'reload schema';"
          echo "✅ PostgREST reloaded"

      - name: Check column spot_ratings.comment
        shell: bash
        run: |
          set -euo pipefail
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            "host=${SUPABASE_DB_HOST} port=${SUPABASE_DB_PORT} dbname=${SUPABASE_DB_NAME} user=${SUPABASE_DB_USER} sslmode=require" \
            -v ON_ERROR_STOP=1 -c "
              select column_name from information_schema.columns
              where table_schema='public' and table_name='spot_ratings' and column_name='comment';
            "

      - name: (Optional) Smoke test REST
        if: ${{ env.SUPABASE_URL != '' && env.SUPABASE_ANON_KEY != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS "${SUPABASE_URL}/rest/v1/spot_ratings?select=id,comment&limit=1" \
            -H "apikey: ${SUPABASE_ANON_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_ANON_KEY}" \
            -H "Accept-Profile: public" | jq .
