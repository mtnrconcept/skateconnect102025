name: Apply Supabase Migrations (Pooler IPv4)

on:
  workflow_dispatch: {}
  push:
    branches:
      - "**"
    paths:
      - "supabase/migrations/**"

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      # === Configuration Supabase (Session Pooler IPv4) ===
      SUPABASE_DB_HOST: aws-1-us-east-1.pooler.supabase.com
      SUPABASE_DB_PORT: "5432"
      SUPABASE_DB_NAME: postgres
      SUPABASE_DB_USER: postgres.vlhxrovtrdhcmvvqlryd   # ‚ö†Ô∏è user complet requis pour pooler IPv4

      # === Secrets √† d√©finir dans GitHub Settings ‚Üí Secrets and variables ‚Üí Actions ===
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}   # mot de passe DB Supabase
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}                   # optionnel (https://vlhxrovtrdhcmvvqlryd.supabase.co)
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}         # optionnel (cl√© API publique)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install psql client & jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq

      - name: Build DB_URL (encode password)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_DB_PASSWORD:-}" ]; then
            echo "‚ùå Secret SUPABASE_DB_PASSWORD manquant."; exit 1;
          fi

          # Encode proprement le mot de passe pour √©viter les caract√®res sp√©ciaux
          PASS_ENC=$(printf '%s' "$SUPABASE_DB_PASSWORD" | jq -sRr @uri)

          DB_URL="postgresql://${SUPABASE_DB_USER}:${PASS_ENC}@${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?sslmode=require"
          echo "DB_URL=$DB_URL" >> "$GITHUB_ENV"

          echo "‚úÖ Connection string construite avec user=${SUPABASE_DB_USER}"
          echo "üîí Mot de passe encod√© (masqu√©)"

      - name: Debug DB_URL user & host
        shell: bash
        run: |
          echo "=== DEBUG INFO ==="
          echo "User: ${SUPABASE_DB_USER}"
          echo "Host: ${SUPABASE_DB_HOST}"
          echo "Port: ${SUPABASE_DB_PORT}"
          echo "Database: ${SUPABASE_DB_NAME}"
          echo "=================="

      - name: Show Supabase CLI version
        run: supabase -v

      - name: Apply migrations via Pooler IPv4
        shell: bash
        run: |
          set -euo pipefail
          echo "üöÄ Applying migrations via Pooler IPv4..."
          supabase migration up --db-url "${DB_URL}"

      - name: Reload PostgREST schema
        shell: bash
        run: |
          set -euo pipefail
          echo "‚ôªÔ∏è  Reloading PostgREST schema..."
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            -h "${SUPABASE_DB_HOST}" -p "${SUPABASE_DB_PORT}" \
            -d "${SUPABASE_DB_NAME}" -U "${SUPABASE_DB_USER}" "sslmode=require" \
            -v ON_ERROR_STOP=1 -c "NOTIFY pgrst, 'reload schema';"
          echo "‚úÖ PostgREST schema reloaded"

      - name: Check column spot_ratings.comment
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç V√©rification de la colonne 'comment' dans 'spot_ratings'..."
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            -h "${SUPABASE_DB_HOST}" -p "${SUPABASE_DB_PORT}" \
            -d "${SUPABASE_DB_NAME}" -U "${SUPABASE_DB_USER}" "sslmode=require" \
            -v ON_ERROR_STOP=1 -c "
              select column_name
              from information_schema.columns
              where table_schema='public'
                and table_name='spot_ratings'
                and column_name='comment';
            "
          echo "‚úÖ V√©rification termin√©e."

      - name: (Optional) Smoke test REST API
        if: ${{ env.SUPABASE_URL != '' && env.SUPABASE_ANON_KEY != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "üåê REST API smoke test..."
          curl -sS "${SUPABASE_URL}/rest/v1/spot_ratings?select=id,comment&limit=1" \
            -H "apikey: ${SUPABASE_ANON_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_ANON_KEY}" \
            -H "Accept-Profile: public" | jq .
