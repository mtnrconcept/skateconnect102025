name: Apply Supabase Migrations

on:
  workflow_dispatch: {}
  push:
    branches:
      - "**"
    paths:
      - "supabase/migrations/**"

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_HOST: db.vlhxrovtrdhcmvvqlryd.supabase.co
      SUPABASE_DB_PORT: "5432"
      SUPABASE_DB_NAME: postgres
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Install psql client and jq
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq

      - name: Build DB_URL (encode password)
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${SUPABASE_DB_PASSWORD:-}" ] || { echo "SUPABASE_DB_PASSWORD manquant"; exit 1; }
          PASS_ENC=$(printf '%s' "$SUPABASE_DB_PASSWORD" | jq -sRr @uri)
          DB_URL="postgresql://postgres:${PASS_ENC}@${SUPABASE_DB_HOST}:${SUPABASE_DB_PORT}/${SUPABASE_DB_NAME}?sslmode=require"
          echo "DB_URL=$DB_URL" >> "$GITHUB_ENV"

      - name: Show Supabase CLI version
        run: supabase -v

      - name: Apply migrations
        shell: bash
        run: |
          set -euo pipefail
          supabase migration up --db-url "${DB_URL}"

      - name: Notify PostgREST to reload schema
        shell: bash
        run: |
          set -euo pipefail
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            -h "${SUPABASE_DB_HOST}" -p "${SUPABASE_DB_PORT}" \
            -d "${SUPABASE_DB_NAME}" -U postgres "sslmode=require" \
            -v ON_ERROR_STOP=1 -c "NOTIFY pgrst, 'reload schema';"

      - name: Sanity check - spot_ratings.comment
        shell: bash
        run: |
          set -euo pipefail
          PGPASSWORD="${SUPABASE_DB_PASSWORD}" psql \
            -h "${SUPABASE_DB_HOST}" -p "${SUPABASE_DB_PORT}" \
            -d "${SUPABASE_DB_NAME}" -U postgres "sslmode=require" \
            -v ON_ERROR_STOP=1 -c "
              select column_name from information_schema.columns
              where table_schema='public'
                and table_name='spot_ratings'
                and column_name='comment';
            "

      - name: Smoke test REST (optional)
        if: ${{ env.SUPABASE_URL != '' && env.SUPABASE_ANON_KEY != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS "${SUPABASE_URL}/rest/v1/spot_ratings?select=id,comment&limit=1" \
            -H "apikey: ${SUPABASE_ANON_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_ANON_KEY}" \
            -H "Accept-Profile: public" | jq .
